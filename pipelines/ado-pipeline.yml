trigger:
- master

pr:
- master

variables:

  # Azure
  azureSubscription: azure-service-connection

  # Container Registry
  containerRegistryName: acrpipelinedemo
  containerRegistryFqdn: acrpipelinedemo.azurecr.io

  # AKS Pre-Production
  aks-cluster-rg-pre-prod: aks-pipeline-demo
  aks-cluster-pre-prod: aks-pipeline-demo

  # Production
  aks-cluster-rg: aks-pipeline-demo
  aks-cluster: aks-pipeline-demo

stages:

- stage: test
  dependsOn: []

  jobs:
  
  - job: tests
    pool: Hosted Ubuntu 1604
    continueOnError: false
    timeoutInMinutes: 20
    
    steps:
    
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.5'
        addToPath: true
        architecture: 'x64'
     
    - script: |
        pip3 install pytest
        pytest azure-vote/azure-vote/tests/ --junitxml=junit/test-results.xml
      continueOnError: true

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-results.xml'
        failTaskOnFailedTests: true
        testRunTitle: 'Python $(python.version)'
        
- stage: build
  dependsOn: test
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  jobs:
  
  - job: docker
    pool: Hosted Ubuntu 1604
    continueOnError: false
    timeoutInMinutes: 20

    steps:

    - task: AzureCLI@1
      displayName: 'AZ ACR Login'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: inlineScript
        inlineScript: 'az acr login --name $(containerRegistryName)'

    - task: HelmDeploy@0
      displayName: 'helm package (azure-vote)'
      inputs:
        command: package
        chartPath: 'chart/azure-vote/'
        arguments: '--version $(Build.BuildId)'

    - task: AzureCLI@1
      displayName: 'AZ ACR helm push (azure-vote)'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: inlineScript
        inlineScript: 'az acr helm push -n $(containerRegistryName) /home/vsts/work/1/a/azure-vote-$(Build.BuildId).tgz'

    - task: CmdLine@2
      displayName: 'docker build (vote-front)'
      inputs:
        script: |
          docker build -t $(containerRegistryFqdn)/azure-vote:$(Build.BuildId) -f azure-vote/Dockerfile .

    - task: CmdLine@2
      displayName: 'docker push (tt-web)'
      inputs:
        script: |
          docker push $(containerRegistryFqdn)/azure-vote:$(Build.BuildId)

- stage: release_pre_production
  dependsOn: build

  jobs:
  - deployment: release_pre_production
    pool: Hosted Ubuntu 1604
    continueOnError: false
    timeoutInMinutes: 20
    environment: pre-production

    strategy:
      runOnce:

        deploy:
          steps:

          - task: AzureCLI@1
            displayName: Deploy Pre-Production
            inputs:
              azureSubscription: $(azureSubscription)
              scriptLocation: 'inlineScript'
              inlineScript: |
                az acr login --name $(containerRegistryName)
                az acr helm repo add --name $(containerRegistryName)
                az aks get-credentials --name $(aks-cluster-pre-prod) --resource-group $(aks-cluster-rg-pre-prod) --admin
                helm upgrade azure-vote-test $(containerRegistryName)/azure-vote --install --set image=$(containerRegistryFqdn)/vote-front:$(Build.BuildId) --namespace azure-vote-test --create-namespace

- stage: release_production
  dependsOn: release_pre_production

  jobs:
  - deployment: release_production
    pool: Hosted Ubuntu 1604
    continueOnError: false
    timeoutInMinutes: 20
    environment: production

    strategy:
      runOnce:
        deploy:
          steps:

          - task: AzureCLI@1
            displayName: Deploy Production
            inputs:
              azureSubscription: $(azureSubscription)
              scriptLocation: 'inlineScript'
              inlineScript: |
                az acr login --name $(containerRegistryName)
                az acr helm repo add --name $(containerRegistryName)
                az aks get-credentials --name $(aks-cluster-pre-prod) --resource-group $(aks-cluster-rg-pre-prod) --admin
                helm upgrade azure-vote-production $(containerRegistryName)/azure-vote --install --set image=$(containerRegistryFqdn)/vote-front:$(Build.BuildId) --namespace azure-vote-production --create-namespace